@using SportsDayScoring.Components.Pages
@using System.Text.Json
@using SportsDayScoring.Models

@inject NavigationManager NavManager

<div class="grid grid-cols-[150px_repeat(4,_0.7fr)_1fr] grid-rows-2 overflow-x-auto border border-black w-\[500px\] mb-3">
    <div class="pl-2 row-start-1 row-span-2 col-start-1 flex justify-center items-center font-bold bg-slate-200">
        @EventName
    </div>
    @for (int i = 0; i < 4; i++) {
        var idx = i;
        <div class="row-start-1 row-span-2 col-start-@(idx + 2)">
            <div class="row-span-2">
                @* // For where the event has not been completed yet *@
                @if (!Parent.Houses.First(h => h.Name == HouseNames[idx]).Events.First(e => e.Name == EventName).IsSaved) {
                    <select class="border-b w-full text-center @HouseColours[idx] p-1" @onchange=@((e) => HandleAthleticScoreChange(e, HouseNames[idx]))>
                        <option disabled selected>Athletic</option>
                        @foreach (var score in AthleticScores) {
                            <option value="@score">@score</option>
                        }
                    </select>
                    <select class="w-full text-center @HouseColours[idx] p-1" @onchange=@((e) => HandleSpiritScoreChange(e, HouseNames[idx]))>
                        <option disabled selected>Spirit</option>
                        @foreach (var score in SpiritScores) {
                            <option value="@score">@score</option>
                        }
                    </select>
                }
                else {
                    <div class="border-b w-full text-center @HouseColours[idx] p-1">
                        @Parent.Houses.First(h => h.Name == HouseNames[idx]).Events.First(e => e.Name == EventName).AthleticScore
                    </div>
                    <div class="w-full text-center @HouseColours[idx] p-1">
                        @Parent.Houses.First(h => h.Name == HouseNames[idx]).Events.First(e => e.Name == EventName).SpiritScore
                    </div>
                }
            </div>
        </div>

    }
    <button class="row-start-1 row-span-2 col-start-6 @(error ? "bg-red-600" : "bg-slate-200") font-bold" @onclick=SaveScores>Save Scores</button>
</div>

@code {
    public string[] HouseColours = ["bg-red-400", "bg-blue-400", "bg-green-400", "bg-yellow-400"];
    public string[] HouseNames = ["Sturt", "Wickham", "Elliott", "Leslie"];
    public bool error;

    [Parameter]
    public ClassEvents Parent { get; set; } = null!;

    [Parameter]
    public string EventName { get; set; } = string.Empty;

    [Parameter]
    public bool Disabled { get; set; }

    public List<int> AthleticScores = [10, 20, 30, 40];
    public List<int> SpiritScores = [-10, 0, 10, 20, 30, 40];

    protected override void OnInitialized() {
        base.OnInitialized();
    }

    public void SaveScores() {
        error = false;
        foreach (var house in Parent.Houses) {
            if (house.Events.First(e => e.Name == EventName).AthleticScore == 0) {
                error = true;
                return;
            }
        }

        foreach (var house in Parent.Houses) {
            house.Events.First(e => e.Name == EventName).IsSaved = true;
        }

        var filePath = $"ScoreCards/Room{Parent.RoomNumber}.json";
        var room = new Class {
                RoomNumber = Parent.RoomNumber,
                Houses = Parent.Houses
            };

        File.WriteAllText(filePath, JsonSerializer.Serialize(room));
        RefreshPage();
    }

    public void HandleAthleticScoreChange(ChangeEventArgs e, string houseName) {
        Parent.Houses.First(h => h.Name == houseName).Events.First(ev => ev.Name == EventName).AthleticScore = Int32.Parse((string)e.Value)!;
        StateHasChanged();
    }

    public void HandleSpiritScoreChange(ChangeEventArgs e, string houseName) {
        Parent.Houses.First(h => h.Name == houseName).Events.First(ev => ev.Name == EventName).SpiritScore = Int32.Parse((string)e.Value)!;
        StateHasChanged();
    }

    public void RefreshPage() {
        NavManager.NavigateTo($"/class-events/{Parent.RoomNumber}", true);
    }

}

