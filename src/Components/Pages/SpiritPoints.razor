@page "/spirit"
@using SportsDayScoring.Models
@using static AppConstants
@using SportsDayScoring.Data

@inject NavigationManager NavigationManager

<div class="flex flex-col gap-2 justify-center items-center">
    <h1 class="text-lg font-bold">Spirit Points</h1>
    <div class="w-[300px] m-auto flex flex-col justify-center items-center gap-2">
        @for (int i = 0; i < 4; i++) {
            var idx = i;
            var houseName = AppConstants.HouseNames[idx];
            
            <select class="w-full font-bold text-center @(HouseStyles[houseName].BackgroundColour) p-1" @onchange=@((e) => HandleSpiritScoreChange(e, houseName))>
                <option selected hidden disabled>@houseName</option>
                @foreach (var score in AppConstants.SpiritScores) {
                    <option value="@score">@score</option>
                }
            </select>
        }
        <br/>
        <button class="bg-green-600 font-bold p-2 w-full" @onclick="SaveScores">Save Scores</button>
        <a href="/" class="bg-sky-200 font-bold p-2 w-full text-center">Return Home</a>
    </div>
</div>

@code {
    [Inject] public DataService DataService { get; set; } = null!;
    private List<HouseSpirit> _houses = [];

    protected override async Task OnInitializedAsync() {
        _houses = await DataService.GetHouseSpirit();
    }

    private void HandleSpiritScoreChange(ChangeEventArgs e, HouseName houseName) {
        _houses.First(h => h.Name == houseName).SpiritScore += int.Parse((string)e.Value!);
        StateHasChanged();
    }

    private async Task SaveScores()
    {
        await DataService.UpdateHouseSpirit(_houses);

        NavigationManager.NavigateTo("/");
    }
}
