@page "/school-events"
@using SportsDayScoring.Models
@using SportsDayScoring.Data
@inject NavigationManager NavigationManager

<div class="flex flex-col gap-2 p-2 w-[300px] items-center justify-center mx-auto">
    <div class="flex gap-4 w-full items-center justify-center m-2">
        <select @bind="SelectedEvent" class="border border-black bg-slate-200 font-bold text-center p-2 w-full">
            <option disabled selected hidden>Select Event</option>
            @foreach (var ev in AppConstants.SchoolEvents)
            {
                <option value="@ev">@ev</option>
            }
        </select>
    </div>
    <div class="flex gap-4 w-[200px] items-center justify-center">
        <p class="font-bold">40 points</p>
        <select @bind="FortyPoints" class="font-bold border border-black p-2">
            <option disabled selected hidden></option>
            @for (int i = 0; i < AppConstants.HouseTextColours.Length; i++)
            {
                <option value="@AppConstants.HouseNames[i]">
                    <p class="h-[20px] w-[20px]">@AppConstants.HouseNames[i]</p>
                </option>
            }
        </select>
    </div>
    <div class="flex gap-4 w-[200px] items-center justify-center">
        <p class="font-bold">30 points</p>
        <select @bind="ThirtyPoints" class="font-bold border border-black p-2">
            <option disabled selected hidden></option>
            @for (int i = 0; i < AppConstants.HouseTextColours.Length; i++)
            {
                <option value="@AppConstants.HouseNames[i]">
                    <p class="h-[20px] w-[20px]">@AppConstants.HouseNames[i]</p>
                </option>
            }
        </select>
    </div>
    <div class="flex gap-4 w-[200px] items-center justify-center">
        <p class="font-bold">20 points</p>
        <select @bind="TwentyPoints" class="font-bold border border-black p-2">
            <option disabled selected hidden></option>
            @for (int i = 0; i < AppConstants.HouseTextColours.Length; i++)
            {
                <option value="@AppConstants.HouseNames[i]">
                    <p class="h-[20px] w-[20px]">@AppConstants.HouseNames[i]</p>
                </option>
            }
        </select>
    </div>
    @if (SelectedEvent is "Tug of War" or "Team Chants")
    {
        <div class="flex gap-4 w-[200px] items-center justify-center">
            <p class="font-bold">10 points</p>
            <select @bind=TenPoints class="font-bold border border-black p-2">
                <option disabled selected hidden></option>
                @for (int i = 0; i < AppConstants.HouseTextColours.Length; i++)
                {
                    <option value="@AppConstants.HouseNames[i]">
                        <p class="h-[20px] w-[20px]">@AppConstants.HouseNames[i]</p>
                    </option>
                }
            </select>
        </div>
    }
    <button class="@(_error ? "bg-red-600" : "bg-green-600") font-bold p-2 w-full" disabled="@(SelectedEvent is null)"
            @onclick="SaveScoresAsync">Save Scores
    </button>
    <a href="/" class="bg-sky-200 font-bold p-2 w-full text-center">Return Home</a>
</div>

@code {
    [Parameter] public DataService DataService { get; set; }
    private bool _error;
    private string? SelectedEvent { get; set; }
    private readonly List<ScoreCard> _eventScores = [];

    private HouseName? FortyPoints { get; set; }
    private HouseName? ThirtyPoints { get; set; }
    private HouseName? TwentyPoints { get; set; }
    private HouseName? TenPoints { get; set; }

    protected override void OnInitialized()
    {
        foreach (var houseName in AppConstants.HouseNames)
        {
            _eventScores.Add(new ScoreCard(houseName));
        }
    }

    private async Task SaveScoresAsync()
    {
        if (SelectedEvent is null || FortyPoints is null || ThirtyPoints is null || TwentyPoints is null
            || (SelectedEvent == "Tug of War" && TenPoints is null) || (SelectedEvent == "Team Chants" && TenPoints is null))
        {
            _error = true;
            return;
        }

        if (SelectedEvent != "Team Chants") // Team chants only gets spirit score
        {
            _eventScores.First(sc => sc.HouseName == FortyPoints).AthleticPoints += 40;
            _eventScores.First(sc => sc.HouseName == ThirtyPoints).AthleticPoints += 30;
            _eventScores.First(sc => sc.HouseName == TwentyPoints).AthleticPoints += 20;
            if (SelectedEvent == "Tug of War")
            {
                _eventScores.First(sc => sc.HouseName == TenPoints).AthleticPoints += 10;
            }
        }
        else
        {
            _eventScores.First(sc => sc.HouseName == FortyPoints).SpiritPoints += 40;
            _eventScores.First(sc => sc.HouseName == ThirtyPoints).SpiritPoints += 30;
            _eventScores.First(sc => sc.HouseName == TwentyPoints).SpiritPoints += 20;
            _eventScores.First(sc => sc.HouseName == TenPoints).SpiritPoints += 10;
        }

        await DataService.UpdateWholeSchoolEventScores(_eventScores);
        NavigationManager.NavigateTo("/school-events", true);
    }

}

