@page "/school-events"
@using Microsoft.AspNetCore.Authorization
@using SportsDayScoring.Models
@using SportsDayScoring.Data
@using static AppConstants
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="flex flex-col gap-2 p-2 w-[300px] items-center justify-center mx-auto">
    <div class="flex gap-4 w-full items-center justify-center m-2">
        <select @bind="SelectedEvent"
                class="border border-black rounded-md bg-slate-200 font-bold text-center p-2 w-full">
            <option disabled selected hidden>Select Event</option>
            @foreach (var ev in AppConstants.SchoolEvents)
            {
                <option value="@ev">@ev</option>
            }
        </select>
    </div>
    <div class="flex gap-4 w-[200px] items-center justify-center">
        <p class="font-bold">40 points</p>
        <select @bind="FortyPoints" class="font-bold border border-black rounded-md @(GetBgColour(FortyPoints)) p-2">
            <option disabled selected hidden></option>
            @foreach (var houseName in HouseNames)
            {
                <option value="@houseName">
                    <p class="h-[20px] w-[20px]">@houseName</p>
                </option>
            }
        </select>
    </div>
    <div class="flex gap-4 w-[200px] items-center justify-center">
        <p class="font-bold">30 points</p>
        <select @bind="ThirtyPoints" class="font-bold border border-black rounded-md @(GetBgColour(ThirtyPoints)) p-2">
            <option disabled selected hidden></option>
            @foreach (var houseName in HouseNames)
            {
                <option value="@houseName">
                    <p class="h-[20px] w-[20px]">@houseName</p>
                </option>
            }
        </select>
    </div>
    <div class="flex gap-4 w-[200px] items-center justify-center">
        <p class="font-bold">20 points</p>
        <select @bind="TwentyPoints" class="font-bold border border-black rounded-md @(GetBgColour(TwentyPoints)) p-2">
            <option disabled selected hidden></option>
            @foreach (var houseName in HouseNames)
            {
                <option value="@houseName">
                    <p class="h-[20px] w-[20px]">@houseName</p>
                </option>
            }
        </select>
    </div>
    @if (SelectedEvent is "Tug of War" or "Team Chants")
    {
        <div class="flex gap-4 w-[200px] items-center justify-center">
            <p class="font-bold">10 points</p>
            <select @bind=TenPoints class="font-bold border border-black rounded-md @(GetBgColour(TenPoints)) p-2">
                <option disabled selected hidden></option>
                @foreach (var houseName in HouseNames)
                {
                    <option value="@houseName">
                        <p class="h-[20px] w-[20px]">@houseName</p>
                    </option>
                }
            </select>
        </div>
    }
    @if (_errorMessage is not null)
    {
        <p class="text-red-500">@_errorMessage</p>
    }

    <button
        class="@(SaveScoresIsDisabled() ? "bg-transparent" : _errorMessage != null ? "bg-red-600" : "bg-green-500") font-bold border rounded-md p-2 w-full"
        disabled="@(SaveScoresIsDisabled())"
        @onclick="SaveScoresAsync">Save Scores
    </button>
    <a href="/" class="bg-sky-200 font-bold p-2 w-full rounded-md text-center">Return Home</a>
</div>

@code {
    [Inject] public DataService DataService { get; set; } = null!;
    private string? SelectedEvent { get; set; }
    private readonly List<ScoreCard> _eventScores = [];
    private string? _errorMessage;

    private HouseName? FortyPoints { get; set; }
    private HouseName? ThirtyPoints { get; set; }
    private HouseName? TwentyPoints { get; set; }
    private HouseName? TenPoints { get; set; }

    protected override void OnInitialized()
    {
        foreach (var houseName in HouseNames)
        {
            _eventScores.Add(new ScoreCard(houseName));
        }
    }

    private string GetBgColour(HouseName? houseName)
    {
        return houseName is null ? "" : HouseStyles[houseName.Value].BackgroundColour;
    }

    private async Task SaveScoresAsync()
    {
        _errorMessage = null;

        if (FortyPoints is null || ThirtyPoints is null || TwentyPoints is null
            || (SelectedEvent == "Tug of War" && TenPoints is null) || (SelectedEvent == "Team Chants" && TenPoints is null))
        {
            _errorMessage = "Please select a house for each score";
            return;
        }

        if (SelectedEvent != "Team Chants") // Team chants only gets spirit score
        {
            _eventScores.First(sc => sc.HouseName == FortyPoints).AthleticPoints += 40;
            _eventScores.First(sc => sc.HouseName == ThirtyPoints).AthleticPoints += 30;
            _eventScores.First(sc => sc.HouseName == TwentyPoints).AthleticPoints += 20;
            if (SelectedEvent == "Tug of War")
            {
                _eventScores.First(sc => sc.HouseName == TenPoints).AthleticPoints += 10;
            }
        }
        else
        {
            _eventScores.First(sc => sc.HouseName == FortyPoints).SpiritPoints += 40;
            _eventScores.First(sc => sc.HouseName == ThirtyPoints).SpiritPoints += 30;
            _eventScores.First(sc => sc.HouseName == TwentyPoints).SpiritPoints += 20;
            _eventScores.First(sc => sc.HouseName == TenPoints).SpiritPoints += 10;
        }

        await DataService.UpdateWholeSchoolEventScores(_eventScores);
        NavigationManager.NavigateTo("/school-events", true);
    }

    private bool SaveScoresIsDisabled()
    {
        return SelectedEvent is null || FortyPoints is null
               || ThirtyPoints is null
               || TwentyPoints is null
               || (SelectedEvent == "Tug of War" && TenPoints is null)
               || (SelectedEvent == "Team Chants" && TenPoints is null);
    }

}

