@page "/scores"
@using SportsDayScoring.Models
@using SportsDayScoring.Data
@using static AppConstants

@inject NavigationManager NavigationManager

<div class="p-2 w-full">
    <h1 class="text-3xl text-center font-bold pb-4">Score Cards</h1>
    <div class="flex flex-col gap-2">
        @if (_athleticsScoreCards.Count == 0)
        {
            <div>Loading...</div>
        }
        else
        {
            // Athletics scores table
            <h2 class="text-2xl text-center font-bold">Athletics Scores</h2>
            <div class="grid grid-cols-[0.2fr_0.7fr_0.5fr] text-center border">
                @for (int i = 0; i < _athleticsScoreCards.Count; i++)
                {
                    <div
                        class="border py-1 @(HouseStyles[_athleticsScoreCards[i].ScoreCard.HouseName].BackgroundColour)">@(GetPlaceText(_athleticsScoreCards[i].Place))</div>
                    <div
                        class="border py-1 @(HouseStyles[_athleticsScoreCards[i].ScoreCard.HouseName].BackgroundColour)">@_athleticsScoreCards[i].ScoreCard.HouseName</div>
                    <div
                        class="border py-1 @(HouseStyles[_athleticsScoreCards[i].ScoreCard.HouseName].BackgroundColour)">@(_athleticsScoreCards[i].ScoreCard.AthleticPoints) points
                    </div>
                }

            </div>

            // Spirit scores table
            <h2 class="text-2xl text-center font-bold">Spirit Scores</h2>
            <div class="grid grid-cols-[0.2fr_0.7fr_0.5fr] text-center border">
                @for (int i = 0; i < _spiritScoreCards.Count; i++)
                {
                    <div
                        class="border py-1 @(HouseStyles[_spiritScoreCards[i].ScoreCard.HouseName].BackgroundColour)">@(GetPlaceText(_spiritScoreCards[i].Place))</div>
                    <div
                        class="border py-1 @(HouseStyles[_spiritScoreCards[i].ScoreCard.HouseName].BackgroundColour)">@_spiritScoreCards[i].ScoreCard.HouseName</div>
                    <div
                        class="border py-1 @(HouseStyles[_spiritScoreCards[i].ScoreCard.HouseName].BackgroundColour)">@(_spiritScoreCards[i].ScoreCard.SpiritPoints) points
                    </div>
                }

            </div>
        }
    </div>
</div>

<div class="w-full text-right px-2 pb-2">
    <button class="bg-sky-200 font-bold p-2 mx-auto" @onclick="GoHome">Return Home</button>
</div>

@code {
    [Inject] public DataService DataService { get; set; } = null!;
    private List<OrderedScoreCard> _athleticsScoreCards = [];
    private List<OrderedScoreCard> _spiritScoreCards = [];

    protected override async Task OnInitializedAsync()
    {
        var scoreCards = await DataService.GetHousesWithAggregatedScores();
        scoreCards.Sort((a, b) => b.AthleticPoints.CompareTo(a.AthleticPoints));

        int place = 1;
        for (int i = 0; i < scoreCards.Count; i++)
        {
            if (i > 0 && scoreCards[i].AthleticPoints == scoreCards[i - 1].AthleticPoints)
            {
                _athleticsScoreCards.Add(new OrderedScoreCard(_athleticsScoreCards[i - 1].Place, scoreCards[i]));
            }
            else
            {
                _athleticsScoreCards.Add(new OrderedScoreCard(place, scoreCards[i]));
            }

            place++;
        }

        scoreCards.Sort((a, b) => b.SpiritPoints.CompareTo(a.SpiritPoints));

        place = 1;
        for (int i = 0; i < scoreCards.Count; i++)
        {
            if (i > 0 && scoreCards[i].SpiritPoints == scoreCards[i - 1].SpiritPoints)
            {
                _spiritScoreCards.Add(new OrderedScoreCard(_spiritScoreCards[i - 1].Place, scoreCards[i]));
            }
            else
            {
                _spiritScoreCards.Add(new OrderedScoreCard(place, scoreCards[i]));
            }

            place++;
        }
    }

    private void GoHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private string GetPlaceText(int i) =>
        i switch
        {
            1 => "1st",
            2 => "2nd",
            3 => "3rd",
            _ => $"{i}th"
        };

    record OrderedScoreCard(int Place, ScoreCard ScoreCard);

}
