@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SportsDayScoring.Data
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="flex items-center justify-center">
    <div class="">
        <section>
            @if (errorMessage is not null)
            {
                <p class="text-red-500">@errorMessage</p>
            }
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator/>
            <h2 class="mb-4">Use a local account to sign in</h2>
            <ValidationSummary class="text-danger" role="alert"/>
            <div>
                <InputText @bind-Value="Input.Username" class="border rounded-md p-2 mb-3 mr-4" autocomplete="username" aria-required="true"/>
                <label for="username">Username</label>
                <ValidationMessage For="() => Input.Username" class="text-danger"/>
            </div>
            <div class="">
                <InputText type="password" @bind-Value="Input.Password" class="border rounded-md p-2 mb-3 mr-4" autocomplete="new-password" aria-required="true" placeholder="password"/>
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
                <div>
                    <button type="submit" class="bg-slate-300 border rounded-md px-2 py-1">Log in</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Username, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

}